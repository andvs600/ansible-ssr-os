  
#!/usr/bin/env bash
if [[ $EUID -ne 0 ]]; then
   echo "[-] This script must be run as root" 1>&2
   exit 1
fi
#
# Windows file conver dos2unix.
#
PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
export PATH
#
# ENABLED NAT FORWARD
# echo 1 > /proc/sys/net/ipv4/ip_forward
#
IPT=iptables
IPTS=iptables-save
IPTR=iptables-restore
FILE='/etc/sysconfig/custom'
# +++ Start and load rules from file /etc/sysconfig/iptables +++
start() {
        echo -n "Starting firewall..."
        $IPTR -c /etc/sysconfig/iptables
        echo "Done"
}
# +++ Stop and save rules in files /etc/sysconfig/iptables +++
stop() {
        echo -n "Stop firewall..."
        $IPTS -c > /etc/sysconfig/iptables
        echo "Done"
}
panic_mode() {
$IPT -F
$IPT -t nat -F
$IPT -t mangle -F
$IPT -P INPUT DROP
$IPT -P FORWARD DROP
$IPT -P OUTPUT DROP
}
# +++ Enable panic mode. Set all policy - DROP rules. +++
panic() {
  read -p "Do you want to enable panic mode? (y/n) " choice
        while :
        do
            case "$choice" in
                y|Y) panic_mode; break;;
                n|N) echo "No panic, operation canceled..."; exit 1;;
                * ) read -p "Please enter 'y' or 'n': " choice;;
            esac
        done
}
# +++ Load default rules +++
reset() {
$IPT -F
$IPT -t nat -F
$IPT -t mangle -F
$IPT -P INPUT DROP
$IPT -P FORWARD DROP
$IPT -P OUTPUT ACCEPT
# +++ STATE RULES +++
# === Drop fragments in all chains ===
$IPT -t mangle -A PREROUTING -f -j DROP
# === Drop TCP packets that are new and are not SYN ===
$IPT -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
# === Drop invalid packets ===
$IPT -A INPUT -m state --state INVALID -j DROP
$IPT -A FORWARD -m state --state INVALID -j DROP
$IPT -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPT -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
# === Drop SYN packets with suspicious MSS value ===
$IPT -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
# === LOCALHOST ===
$IPT -A FORWARD ! -i lo -s 127.0.0.1 -j DROP
$IPT -A INPUT ! -i lo -s 127.0.0.1 -j DROP
$IPT -A FORWARD ! -i lo -d 127.0.0.1 -j DROP
$IPT -A INPUT ! -i lo -d 127.0.0.1 -j DROP
$IPT -A INPUT -s 127.0.0.1 -j ACCEPT
$IPT -A OUTPUT -d 127.0.0.1 -j ACCEPT
# === Block spoofed packets ===
$IPT -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
$IPT -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
$IPT -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
{%- if lxc_host is defined or lxc_host is sameas true %}
$IPT -t mangle -A PREROUTING -s 172.17.0.0/16,172.18.0.0/16 -j RETURN
{% endif -%}
$IPT -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
$IPT -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
$IPT -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
$IPT -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
{%- if lxc_host is defined or lxc_host is sameas true %}
# === Docker packets ===
$IPT -t nat -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
$IPT -t nat -A POSTROUTING -s 172.18.0.0/16 ! -o br+ -j MASQUERADE
$IPT -A FORWARD -j DOCKER-USER
$IPT -A FORWARD -j DOCKER-ISOLATION-STAGE-1
$IPT -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
$IPT -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
$IPT -A FORWARD -i docker0 -o docker0 -j ACCEPT
$IPT -A FORWARD -o br+ -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
$IPT -A FORWARD -i br+ ! -o br+ -j ACCEPT
$IPT -A FORWARD -i br+ -o br+ -j ACCEPT
$IPT -A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
$IPT -A DOCKER-ISOLATION-STAGE-1 -j RETURN
$IPT -A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
$IPT -A DOCKER-ISOLATION-STAGE-2 -j RETURN
$IPT -A DOCKER-USER -j RETURN
{% endif -%}
# === STOP SCAN ===
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN -m limit --limit 1/m --limit-burst 1  -j LOG --log-prefix "FIN-SCAN: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "SYNFIN-SCAN: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL URG,PSH,FIN -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "NMAP-XMAS-SCAN: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL URG,PSH,FIN -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "FIN scan: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "PSH scan: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "URG scan: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "XMAS scan: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "NULL scan: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -m limit --limit 1/m --limit-burst 1 -j LOG --log-prefix "NMAP-ID: " --log-level info
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
$IPT -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
# === ICMP ENABLED ===
$IPT -t mangle -A PREROUTING -p icmp -m limit --limit 1/s --limit-burst 1 -j ACCEPT
$IPT -t mangle -A PREROUTING -p icmp -m limit --limit 1/s --limit-burst 100 -j LOG --log-prefix "ICMP FLOOD: " --log-level info
$IPT -t mangle -A PREROUTING -p icmp -m recent --name icmp --update --seconds 60 --hitcount 75 -j DROP
$IPT -A OUTPUT -p icmp -j ACCEPT
# === SSH ENABLED ===
$IPT -A INPUT -p tcp -m state --state NEW --dport 22 -m recent --name ssh --update --seconds 25 --hitcount 3 -j DROP
$IPT -A INPUT -p tcp -m state --state NEW --dport 22 -j LOG --log-prefix "SSH-WARNING: " --log-level warning
# === SSH ALLOW ===
$IPT -A INPUT -p tcp -m state --state NEW --dport 22 {% if nf_int is undefined or nf_int is sameas true %}-s 10.0.0.0/8 {% endif %}-m recent --name ssh --set -j ACCEPT
# === Limit connections per source IP ===
$IPT -A INPUT -p tcp --syn -m connlimit --connlimit-above {{ sper_limit_conn }} -j REJECT --reject-with tcp-reset
# === Limit RST packets ===
$IPT -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
$IPT -A INPUT -p tcp --tcp-flags RST RST -j DROP
# === RATE LIMITING ===
#$IPT -A INPUT -p tcp --syn -m limit --limit 180/s --limit-burst 10000 -j ACCEPT
#$IPT -A INPUT -p tcp --syn -j DROP
#$IPT -A INPUT -p udp -m state --state NEW -m limit --limit 24/s --limit-burst 10000 -j ACCEPT
#$IPT -A INPUT -p udp -m state --state NEW -j DROP
}
# +++ Custom rules +++
init() {
        echo -n "init firewall..."
        reset
# RULES FIREWALL
#
. /etc/sysconfig/custom
#
# SAVE RULES IN FILE
$IPTS -c > /etc/sysconfig/iptables
echo "Done"
}
edit() {
  echo "Editing $FILE..."
  vim -c ":set tabstop=8" -c ":set shiftwidth=8" -c ":set noexpandtab" $FILE
  echo -e "\t\t[OK]"
}
# +++ Show rules iptables +++
show() {
        echo -n "Show firewall..."
        $IPT -L -n -v
        exit 0
}
if  [[ $1 == "init" ]] || [[ $1 == "reset" ]] ; then
    case $1 in
      init) init;;
      reset) reset;;
      *) echo "Usage: $0 init|reset"
    esac
else
     PS3='Select action: '
     options=("Start and load rules from file /etc/sysconfig/iptables" "Stop and save rules from file /etc/sysconfig/iptables" "Restart and load custom rules" "Restart and load default rules" "Edit custom rules" "Enable panic mode" "Show rules iptables" "Quit")
        select opt in "${options[@]}"
        do
        case $opt in
                "Start and load rules from file /etc/sysconfig/iptables") start;;
                "Stop and save rules from file /etc/sysconfig/iptables") stop;;
                "Restart and load custom rules") init;;
                "Restart and load default rules") reset;;
                "Edit custom rules") edit;;
                "Enable panic mode") panic;;
                "Show rules iptables") show;;
                "Quit") break;;
                *) echo "Invalid option. Try another one.";continue;;
        esac
        done
fi
exit 0