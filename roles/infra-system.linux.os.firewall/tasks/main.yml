---
- name: Check services exists
  block:
    - name: Check if Docker service exists
      stat: path="/usr/lib/systemd/system/docker.service"
      register: docker_service
      ignore_errors: yes

    - debug:
        msg: "Possibly the node uses Docker. The node must be configured manually!"
      register: result
      when: (docker_service.stat.exists == true)

    - name: LXC host
      set_fact:
        lxc_host: true
      when: lxc_host is undefined and result is succeeded

    - name: Check if iptables service exists
      stat: path="/usr/lib/systemd/system/iptables.service"
      register: iptables_service
      ignore_errors: yes
    
    - name: Check if nftables service exists
      stat: path="/usr/lib/systemd/system/nftables.service"
      register: nftables_service
      ignore_errors: yes

- name: Skip play on host if worked firewalld by default
  block:
  - name: Check service facts
    service_facts:

  - name: Firewalld status
    debug:
      msg: "STATUS: {{ ansible_facts.services['firewalld.service'].status }}"

  - name: IPtables status
    debug:
      msg: "STATUS: {{ ansible_facts.services['iptables.service'].status }}"

  - name: NFtables status
    debug:
      msg: "STATUS: {{ ansible_facts.services['nftables.service'].status }}"

  - name:
    assert:
      that:
        - "'{{ ansible_facts.services['firewalld.service'].state }}' == 'running'"
      fail_msg: "Firewalld is not running"
      success_msg: "Firewalld is running"
  always:
    - meta: end_host
  when: ((firewalld_not_disabled | bool == true) and (firewalld_not_disabled is defined))


- name: Include task config iptables
  include: iptables.yml
  when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7')

- name: Include task config nftables
  include: nftables.yml
  when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version >= '8')
...